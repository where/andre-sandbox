package com.andre.jaxb;

import java.util.*;
import java.io.*;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.UnmarshalException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.ValidationEvent;
import javax.xml.bind.ValidationEventHandler;
import javax.xml.bind.ValidationEventLocator;

import static javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;

/**
 * Custom validation event handler.
 */
public class CustomValidationEventHandler implements ValidationEventHandler
{
  private List<String> errors = new ArrayList<String>();
  public List<String> getErrors() { return errors ; }

  // allow unmarshalling to continue even if there are errors
  public boolean handleEvent(ValidationEvent ve) 
  {
    // ignore warnings
    if (ve.getSeverity() != ValidationEvent.WARNING) 
      {
      ValidationEventLocator vel = ve.getLocator();
      String emsg =
        "Line:Col[" + vel.getLineNumber() +
        ":" + vel.getColumnNumber() +
        "]:" + ve.getMessage() ;
      //System.out.println("ERROR: "+emsg);
      errors.add(emsg);
      }
    return true;
  }

  @Override 
  public String toString()
  {
    return CollectionUtils.toString(errors);
  }
}
