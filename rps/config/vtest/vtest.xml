<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
  >
<!-- ** Properties **************** -->

  <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations" >
      <list>
        <value>classpath:vtest.properties</value>
        <value>classpath:app.properties</value>
        <value>classpath:common.properties</value>
        <value>classpath:user.properties</value>
      </list>
    </property>
    <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
    <property name="ignoreResourceNotFound" value="true"/>
  </bean>

  <!-- NOTE: must pass in from command line with System properties -->

<!--
  <import resource="${providerConfigFile}"/>
  <import resource="${daoConfigFile}"/>
-->
  <import resource="classpath:tasks.xml" />
  <import resource="classpath:appContext-client.xml" />

<!-- ** Key Generators ****************** -->

<!--
  <bean id="fixedKeyGenerator" 
        class="com.scanscout.vtest.MyFixedKeyGenerator" scope="prototype">
     <constructor-arg value="${cfg.keyGenerator.size}" />
     <constructor-arg value="0" />
     <property name="doReset" value="${cfg.fixedKeyGenerator.reset}" />
  </bean>
-->

  <bean id="fixedKeyGenerator" 
        class="com.amm.vtest.services.datagen.FixedKeyGenerator" scope="prototype">
     <constructor-arg value="${cfg.keyGenerator.size}" />
     <constructor-arg value="0" />
     <property name="doReset" value="${cfg.fixedKeyGenerator.reset}" />
  </bean>

  <bean id="randomKeyGenerator" 
        class="com.amm.vtest.services.datagen.RandomKeyGenerator" scope="prototype">
     <constructor-arg value="${cfg.keyGenerator.size}" />
     <constructor-arg value="${cfg.key.seed}" />
     <property name="cycleMax" value="${cfg.randomGenerator.cycleMax}" />
     <property name="doReset" value="${cfg.randomKeyGenerator.reset}" />
  </bean>

  <bean id="randomKeyGeneratorFail" 
        class="com.amm.vtest.services.datagen.RandomKeyGenerator" scope="prototype">
     <constructor-arg value="${cfg.keyGenerator.size}" />
     <constructor-arg value="918273645" />
  </bean>

  <bean id="uuidKeyGenerator" 
        class="com.amm.vtest.services.datagen.UuidKeyGenerator" scope="prototype">
  </bean>

  <bean id="MD5KeyGenerator" 
        class="com.amm.vtest.services.datagen.MD5KeyGenerator" scope="prototype">
     <constructor-arg value="${cfg.key.seed}" />
  </bean>

<!-- ** Value Generators ****************** -->

  <bean id="fixedValueGenerator" 
        class="com.amm.vtest.services.datagen.FixedValueGenerator" scope="prototype">
     <constructor-arg value="${cfg.valueGenerator.size}" />
  </bean>

  <bean id="randomValueGenerator" 
        class="com.amm.vtest.services.datagen.RandomValueGenerator" scope="prototype">
     <constructor-arg value="${cfg.valueGenerator.size}" />
     <constructor-arg value="${cfg.value.seed}" />
  </bean>

  <bean id="randomValueSizeGenerator" 
        class="com.amm.vtest.services.datagen.RandomValueSizeGenerator" scope="prototype">
     <constructor-arg value="${cfg.value.seed}" />
     <constructor-arg value="${cfg.valueGenerator.baseSize}" />
     <constructor-arg value="${cfg.valueGenerator.range}" />
  </bean>

<!-- ** VTest **************** -->

  <bean id="vtestProcessor" 
        class="com.amm.vtest.VTestProcessor" scope="prototype">
    <constructor-arg ref="executor" />
    <constructor-arg ref="callStatsReporter" />
    <property name="warmup"          ref="${cfg.warmup}" />
    <property name="logDetails"      value="true" />
    <property name="logDetailsAsXml" value="true" />
    <property name="logSummaryAsXml" value="true" />
  </bean>

  <bean id="callStatsReporter" 
        class="com.amm.vtest.services.callstats.CallStatsReporter" scope="prototype">
    <constructor-arg ref="callStatsWriter" />
    <property name="properties" ref="configProperties" />
  </bean>

  <bean id="callStatsWriter"
        class="com.amm.vtest.services.callstats.CallStatsWriter" scope="prototype">
    <property name="showRatio" value="false" />
    <property name="showMean" value="true" />
    <property name="showStdDev" value="false" />
    <property name="labelErrors" value="Err" />
    <property name="labelFailures" value="Fail" />
    <property name="labelSummary" value="Summary" />
    <property name="labelMillis" value="Millis" />
    <property name="labelStdDev" value="sdev" />
    <property name="formatMean" value="%7.3f" />
  </bean>

  <util:map id="configProperties">
<!--
    <entry key="hosts" value="${hosts}" />
    <entry key="providerConfigFile" value="${providerConfigFile}" />
    <entry key="daoConfigFile" value="${daoConfigFile}" />
-->
    <entry key="requests" value="${cfg.requests}" />
    <entry key="threadPoolSize" value="${cfg.threadPoolSize}" />
    <entry key="keyGenerator" value="${cfg.keyGenerator}" />
    <entry key="valueGenerator" value="${cfg.valueGenerator}" />
    <entry key="key.seed" value="${cfg.key.seed}" />
    <entry key="value.seed" value="${cfg.value.seed}" />
<!--
    <entry key="valueSize" value="${cfg.valueSize}" />
-->
    <entry key="valueGenerator.baseSize" value="${cfg.valueGenerator.baseSize}" />
    <entry key="valueGenerator.range" value="${cfg.valueGenerator.range}" />
    <entry key="warmup" value="${cfg.warmup}" />
    <entry key="requestsWarmup" value="${cfg.requestsWarmup}" />
    <entry key="rampupTime" value="${cfg.fixedKeyGenerator.rampupTime}" />
<!--
    <entry key="getTask.checkSize" value="${cfg.getTask.checkSize}" />
    <entry key="getTask.checkValue" value="${cfg.getTask.checkValue}" />
    <entry key="mongodb.useDateTimestamp" value="${mongodb.useDateTimestamp}" />
    <entry key="cassandra.consistencyLevelPolicy" value="${cassandra.consistencyLevelPolicy}" />
    <entry key="hashmap.useConcurrentHashMap" value="${hashmap.useConcurrentHashMap}" />
-->
  </util:map >

<!-- ** Executors **************** -->

  <alias alias="executor" name="fixedThreadPool.executor" />

  <bean id="sequential.executor" 
        class="com.amm.vtest.SequentialExecutor" scope="prototype">
    <property name="numRequests" value="${cfg.requests}" />
  </bean>

  <bean id="fixedThreadPool.executor" 
        class="com.amm.vtest.FixedThreadPoolExecutor" scope="prototype">
    <property name="numRequests"     value="${cfg.requests}" />
    <property name="threadPoolSize"  value="${cfg.threadPoolSize}" />
    <property name="logModulo"       value="${cfg.logModulo}" />
    <property name="rampupTime"      value="${cfg.fixedKeyGenerator.rampupTime}" />
  </bean>

<!-- ** Warmup **************** -->

  <bean id="nullWarmup" class="com.amm.vtest.NullWarmup" scope="prototype" />
  <bean id="defaultWarmup" class="com.amm.vtest.NullWarmup" scope="prototype" />

<!-- AMM
  <bean id="defaultWarmup"
        class="com.amm.vtest.DefaultWarmup" scope="prototype">
    <constructor-arg ref="ping.task" />
    <constructor-arg ref="executor" />
    <constructor-arg ref="callStatsReporter" />
    <constructor-arg value="${cfg.requestsWarmup}" />
  </bean>
-->
</beans>
